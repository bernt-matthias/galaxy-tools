<tool id="fls_fastq_screen_wrapper" name="Run FastQ Screen" version="0.1.0">
  <description>to check for contaminants in your sample</description>
  <command interpreter="bash">fastq_screen_wrapper.sh
  #if $input.extension.startswith( "fastqcs" ):
     ##if extension starts with fastqcs, then we have a color space file
     --color
  #end if
  $input $conf_file $screen_txt $screen_png</command>
  <inputs>
    <param name="input" type="data" format="fastqsanger,fastqcssanger" label="FASTQ file" />
    <param name="conf_file" type="select" label="FastQ Screen conf file">
      <options from_file="fastq_screen_conf.loc">
        <filter type="multiple_splitter" column="1" separator=","/>
        <filter type="param_value" column="1" ref="input" ref_attribute="extension"/>
	<filter type="sort_by" column="0"/>
	<column name="name" index="0"/>
	<column name="value" index="2"/>
        <validator type="no_options" message="No indexes are available for the selected input dataset"/>
      </options>
    </param>
  </inputs>
  <outputs>
    <data format="txt" name="screen_txt" label="${tool.name} against ${conf_file.fields.name} on ${on_string}: report" />
    <data format="png" name="screen_png" label="${tool.name} against ${conf_file.fields.name} on ${on_string}: plot" />
  </outputs>
  <tests>
    <test>
      <param name="input" value="fastq_screen_in.fastq" />
      <param name="conf_file" value="fastq_screen_in.conf" />
      <output name="screen_txt" file="fastq_screen_out.txt" />
      <output name="screen_png" file="fastq_screen_out.png" compare="sim_size" />
    </test>
  </tests>
  <help>
Run Fastq Screen as part of a QC pipeline.

fastq_screen allows you to take a sequence dataset and search it
against a set of bowtie databases. It will then generate
both a text and a graphical summary of the results to see if
the sequence dataset contains the kind of sequences you expect
or not.
  </help>
</tool>