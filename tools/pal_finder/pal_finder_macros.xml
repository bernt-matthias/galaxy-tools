<macros>
  <!--
       Set the path for the pal_finder data files
  -->
  <token name="@CONDA_PAL_FINDER_SCRIPT_DIR@">if [ -z "\$PALFINDER_SCRIPT_DIR" ]; then export PALFINDER_SCRIPT_DIR=\$(dirname \$(readlink -e \$(which pal_finder))); fi</token>
  <token name="@CONDA_PAL_FINDER_DATA_DIR@">if [ -z "\$PALFINDER_DATA_DIR" ]; then export PALFINDER_DATA_DIR=\$(dirname \$(readlink -e \$(which pal_finder))); fi</token>
  <xml name="output_illumina_microsat_summary">
    <output name="output_microsat_summary">
      <assert_contents>
	<has_line line="allExtended:&#009;0" />
	<has_line line="allSpan:&#009;0" />
	<has_line line="broken:&#009;2" />
	<has_line line="compound:&#009;2" />
	<has_line line="readsWithMicrosat:&#009;13" />
	<has_line line="totalBases:&#009;2320" />
	<has_line line="totalReads:&#009;20&#009;(2 x 10)" />
	<has_line line="readsWithBadRanges:&#009;0" />
	<has_line line="Microsat Type&#009;monomer length&#009;total loci&#009;loci w/ primers&#009;reads with loci&#009;total bases&#009;extended&#009;extended w/ primers&#009;spanning&#009;spanning w/ primers" />
	<has_line_matching expression="(AC|TG)\t2\t7\t4\t7\t116\t0?\t0?\t0?\t0?" />
	<has_line_matching expression="(AT|CG)\t2\t8\t0\t6\t106\t0?\t0?\t0?\t0?" />
	<has_line_matching expression="(AG|TC)\t2\t2\t1\t2\t26\t0?\t0?\t0?\t0?" />
      </assert_contents>
    </output>
  </xml>
  <xml name="output_illumina_microsat_subset_summary">
    <output name="output_microsat_summary">
      <assert_contents>
	<has_line line="allExtended:&#009;0" />
	<has_line line="allSpan:&#009;0" />
	<has_line line="broken:&#009;0" />
	<has_line line="compound:&#009;2" />
	<has_line line="readsWithMicrosat:&#009;7" />
	<has_line line="totalBases:&#009;1160" />
	<has_line line="totalReads:&#009;10&#009;(2 x 5)" />
	<has_line line="Microsat Type&#009;monomer length&#009;total loci&#009;loci w/ primers&#009;reads with loci&#009;total bases&#009;extended&#009;extended w/ primers&#009;spanning&#009;spanning w/ primers" />
	<has_line_matching expression="(AC|TG)\t2\t6\t3\t6\t104\t0?\t0?\t0?\t0?" />
	<has_line_matching expression="(AT|CG)\t2\t3\t0\t3\t38\t0?\t0?\t0?\t0?" />
	<has_line_matching expression="(AG|TC)\t2\t0\t0\t0\t0\t0?\t0?\t0?\t0?" />
      </assert_contents>
    </output>
  </xml>
  <xml name="output_illumina_microsat_summary_bad_ranges">
    <output name="output_microsat_summary">
      <assert_contents>
	<has_line line="allExtended:&#009;2" />
	<has_line line="allSpan:&#009;0" />
	<has_line line="broken:&#009;0" />
	<has_line line="compound:&#009;4" />
	<has_line line="readsWithMicrosat:&#009;12" />
	<has_line line="totalBases:&#009;2231" />
	<has_line line="totalReads:&#009;12&#009;(2 x 6)" />
	<has_line line="readsWithBadRanges:&#009;2" />
	<has_line line="Microsat Type&#009;monomer length&#009;total loci&#009;loci w/ primers&#009;reads with loci&#009;total bases&#009;extended&#009;extended w/ primers&#009;spanning&#009;spanning w/ primers" />
	<!--
	    I'd like to do a basic check on the remainder of the file but
	    there are too many lines for the 'assert_contents' method (and
	    the tag doesn't provide the functionality to do a simple line
	    count
	-->
      </assert_contents>
    </output>
  </xml>
  <xml name="output_454_microsat_summary">
    <output name="output_microsat_summary">
      <assert_contents>
	<has_line line="broken:&#009;1" />
	<has_line line="compound:&#009;0" />
	<has_line line="readsWithMicrosat:&#009;1" />
	<has_line line="readsWithPrimers:&#009;0" />
	<has_line line="totalBases:&#009;8639" />
	<has_line line="totalReads:&#009;38" />
	<has_line line="Microsat Type&#009;monomer length&#009;reads with loci&#009;total loci&#009;loci amplified&#009;total loci bases&#009;loci bases amplified" />
	<has_line_matching expression="(AC|TG|AT|CG|AG|TC)\t.*" />
      </assert_contents>
    </output>
  </xml>
</macros>
